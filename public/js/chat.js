// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã

var speechRecognizer;
var avatarSynthesizer;
var peerConnection;
var peerConnectionDataChannel;
var messages = [];
var messageInitiated = false;
var dataSources = [];
var sentenceLevelPunctuations = ['.', '?', '!', ':', ';', '„ÄÇ', 'Ôºü', 'ÔºÅ', 'Ôºö', 'Ôºõ'];
var enableDisplayTextAlignmentWithSpeech = true;
var isSpeaking = false;
var isReconnecting = false;
var speakingText = "";
var spokenTextQueue = [];
var repeatSpeakingSentenceAfterReconnection = true;
var sessionActive = false;
var userClosedSession = false;
var lastInteractionTime = new Date();
var lastSpeakTime;
var imgUrl = "";
var greeted = false;
var pendingMsgEl = null;
var sttBuffer = '';
var muteWhileRecording = false;

// üéØ –ù–û–í–ê–Ø –ì–õ–û–ë–ê–õ–¨–ù–ê–Ø –ü–ï–†–ï–ú–ï–ù–ù–ê–Ø –î–õ–Ø –í–´–ë–†–ê–ù–ù–û–ì–û –Ø–ó–´–ö–ê
var selectedLanguage = "ru"; // –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é —Ä—É—Å—Å–∫–∏–π

// Assistant API –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
var assistantId = 'asst_6NOlwHDqZx81wOFUG0O5NSzE';
var threadId = null;
var runId = null;
var functionCallsEndpoint = '/api/assistant';

// ==== Chat UI helpers ====
// pending UI
var pendingMsgEl = null;

// –°–ª–æ–≤–∞—Ä—å —Ä–µ–≥–∏–æ–Ω–æ–≤ (—Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –∫–∞–∫ —É —Ä–∞–∑—Ä–∞–±–∞, –Ω–æ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π)
const REGION_MAPPING = {
    "–ê–∫–º–æ–ª–∏–Ω—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å": [
        "–ê–∫–º–æ–ª–∞", "–ê–∫–º–æ–ª–∏–Ω—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å", "–ê–∫–º–æ–ª–∏–Ω—Å–∫–∞—è", "–ê“õ–º–æ–ª–∞ –æ–±–ª—ã—Å—ã",
        "Akmola", "Akmola region", "Aqmola"  // + –∞–Ω–≥–ª–∏–π—Å–∫–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã
    ],
    "–ê–∫—Ç—é–±–∏–Ω—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å": [
        "–ê–∫—Ç–æ–±–µ", "–ê–∫—Ç—é–±–∏–Ω—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å", "–ê–∫—Ç—é–±–∏–Ω—Å–∫–∞—è", "–ê“õ—Ç”©–±–µ –æ–±–ª—ã—Å—ã",
        "Aktobe", "Aktobe region", "Aqtobe"
    ],
    "–ê–ª–º–∞—Ç–∏–Ω—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å": [
        "–ê–ª–º–∞—Ç–∏–Ω—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å", "–ê–ª–º–∞—Ç–∏–Ω—Å–∫–∞—è", "–ê–ª–º–∞—Ç—ã –æ–±–ª—ã—Å—ã",
        "Almaty region", "Almaty oblast"
    ],
    "–ê—Ç—ã—Ä–∞—É—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å": [
        "–ê—Ç—ã—Ä–∞—É", "–ê—Ç—ã—Ä–∞—É—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å", "–ê—Ç—ã—Ä–∞—É—Å–∫–∞—è", "–ê—Ç—ã—Ä–∞—É –æ–±–ª—ã—Å—ã",
        "Atyrau", "Atyrau region"
    ],
    "–í–æ—Å—Ç–æ—á–Ω–æ-–ö–∞–∑–∞—Ö—Å—Ç–∞–Ω—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å": [
        "–í–ö–û", "–í–æ—Å—Ç–æ—á–Ω–æ-–ö–∞–∑–∞—Ö—Å—Ç–∞–Ω—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å", "–í–æ—Å—Ç–æ—á–Ω–æ-–ö–∞–∑–∞—Ö—Å—Ç–∞–Ω—Å–∫–∞—è", 
        "–®“ö–û", "”®—Å–∫–µ–º–µ–Ω", "–£—Å—Ç—å-–ö–∞–º–µ–Ω–æ–≥–æ—Ä—Å–∫",
        "East Kazakhstan", "VKO", "Ust-Kamenogorsk"
    ],
    "–ñ–∞–º–±—ã–ª—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å": [
        "–ñ–∞–º–±—ã–ª", "–ñ–∞–º–±—ã–ª—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å", "–ñ–∞–º–±—ã–ª—Å–∫–∞—è", "–ñ–∞–º–±—ã–ª –æ–±–ª—ã—Å—ã", "–¢–∞—Ä–∞–∑",
        "Zhambyl", "Zhambyl region", "Jambyl", "Taraz"
    ],
    "–ó–∞–ø–∞–¥–Ω–æ-–ö–∞–∑–∞—Ö—Å—Ç–∞–Ω—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å": [
        "–ó–ö–û", "–ó–∞–ø–∞–¥–Ω–æ-–ö–∞–∑–∞—Ö—Å—Ç–∞–Ω—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å", "–ó–∞–ø–∞–¥–Ω–æ-–ö–∞–∑–∞—Ö—Å—Ç–∞–Ω—Å–∫–∞—è", 
        "–ë–∞—Ç—ã—Å “ö–∞–∑–∞“õ—Å—Ç–∞–Ω –æ–±–ª—ã—Å—ã", "–£—Ä–∞–ª—å—Å–∫",
        "West Kazakhstan", "ZKO", "Uralsk"
    ],
    "–ö–∞—Ä–∞–≥–∞–Ω–¥–∏–Ω—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å": [
        "–ö–∞—Ä–∞–≥–∞–Ω–¥–∞", "–ö–∞—Ä–∞–≥–∞–Ω–¥–∏–Ω—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å", "–ö–∞—Ä–∞–≥–∞–Ω–¥–∏–Ω—Å–∫–∞—è", "“ö–∞—Ä–∞“ì–∞–Ω–¥—ã –æ–±–ª—ã—Å—ã",
        "Karaganda", "Karagandy", "Qaraghandy"
    ],
    "–ö–æ—Å—Ç–∞–Ω–∞–π—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å": [
        "–ö–æ—Å—Ç–∞–Ω–∞–π", "–ö–æ—Å—Ç–∞–Ω–∞–π—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å", "–ö–æ—Å—Ç–∞–Ω–∞–π—Å–∫–∞—è", "“ö–æ—Å—Ç–∞–Ω–∞–π –æ–±–ª—ã—Å—ã",
        "Kostanay", "Qostanay"
    ],
    "–ö—ã–∑—ã–ª–æ—Ä–¥–∏–Ω—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å": [
        "–ö—ã–∑—ã–ª–æ—Ä–¥–∞", "–ö—ã–∑—ã–ª–æ—Ä–¥–∏–Ω—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å", "–ö—ã–∑—ã–ª–æ—Ä–¥–∏–Ω—Å–∫–∞—è", "“ö—ã–∑—ã–ª–æ—Ä–¥–∞ –æ–±–ª—ã—Å—ã",
        "Kyzylorda", "Qyzylorda"
    ],
    "–ú–∞–Ω–≥–∏—Å—Ç–∞—É—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å": [
        "–ú–∞–Ω–≥–∏—Å—Ç–∞—É—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å", "–ú–∞–Ω–≥–∏—Å—Ç–∞—É—Å–∫–∞—è", "–ú–∞–Ω–≥–∏—Å—Ç–∞—É—Å–∫–∞—è –æ–±–ª.", 
        "–ú–∞“£“ì—ã—Å—Ç–∞—É –æ–±–ª—ã—Å—ã", "–ê–∫—Ç–∞—É",
        "Mangystau", "Mangistau", "Aktau"
    ],
    "–ü–∞–≤–ª–æ–¥–∞—Ä—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å": [
        "–ü–∞–≤–ª–æ–¥–∞—Ä", "–ü–∞–≤–ª–æ–¥–∞—Ä—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å", "–ü–∞–≤–ª–æ–¥–∞—Ä—Å–∫–∞—è", "–ü–∞–≤–ª–æ–¥–∞—Ä –æ–±–ª—ã—Å—ã",
        "Pavlodar", "Pavlodar region"
    ],
    "–°–µ–≤–µ—Ä–æ-–ö–∞–∑–∞—Ö—Å—Ç–∞–Ω—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å": [
        "–°–ö–û", "–°–µ–≤–µ—Ä–æ-–ö–∞–∑–∞—Ö—Å—Ç–∞–Ω—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å", "–°–µ–≤–µ—Ä–æ-–ö–∞–∑–∞—Ö—Å—Ç–∞–Ω—Å–∫–∞—è", 
        "–°–æ–ª—Ç“Ø—Å—Ç—ñ–∫ “ö–∞–∑–∞“õ—Å—Ç–∞–Ω –æ–±–ª—ã—Å—ã", "–ü–µ—Ç—Ä–æ–ø–∞–≤–ª–æ–≤—Å–∫",
        "North Kazakhstan", "SKO", "Petropavlovsk"
    ],
    "–¢—É—Ä–∫–µ—Å—Ç–∞–Ω—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å": [
        "–¢—É—Ä–∫–µ—Å—Ç–∞–Ω", "–¢—É—Ä–∫–µ—Å—Ç–∞–Ω—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å", "–¢—É—Ä–∫–µ—Å—Ç–∞–Ω—Å–∫–∞—è", "–¢“Ø—Ä–∫—ñ—Å—Ç–∞–Ω –æ–±–ª—ã—Å—ã",
        "Turkestan", "Turkistan"
    ],
    "–û–±–ª–∞—Å—Ç—å –ê–±–∞–π": [
        "–ê–±–∞–π", "–ê–±–∞–π—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å", "–ê–±–∞–π –æ–±–ª—ã—Å—ã", "–°–µ–º–µ–π",
        "Abai", "Abay", "Semey"
    ],
    "–û–±–ª–∞—Å—Ç—å –ñ–µ—Ç—ñ—Å—É": [
        "–ñ–µ—Ç—ñ—Å—É", "–ñ–µ—Ç—ñ—Å—É—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å", "–ñ–µ—Ç—ñ—Å—É –æ–±–ª—ã—Å—ã", "–¢–∞–ª–¥—ã–∫–æ—Ä–≥–∞–Ω",
        "Zhetysu", "Jetisu", "Taldykorgan"
    ],
    "–û–±–ª–∞—Å—Ç—å “∞–ª—ã—Ç–∞—É": [
        "–£–ª—ã—Ç–∞—É", "–£–ª—ã—Ç–∞—É—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å", "“∞–ª—ã—Ç–∞—É –æ–±–ª—ã—Å—ã", "–ñ–µ–∑–∫–∞–∑–≥–∞–Ω",
        "Ulytau", "Zhezkazgan"
    ],
    "–≥–æ—Ä–æ–¥ –ê–ª–º–∞—Ç—ã": [
        "–ê–ª–º–∞—Ç—ã", "–≥. –ê–ª–º–∞—Ç—ã", "–≥.–ê–ª–º–∞—Ç—ã", "Almaty", "Almaty city"
    ],
    "–≥–æ—Ä–æ–¥ –ê—Å—Ç–∞–Ω–∞": [
        "–ê—Å—Ç–∞–Ω–∞", "–≥. –ê—Å—Ç–∞–Ω–∞", "–≥.–ê—Å—Ç–∞–Ω–∞", "Astana", "Astana city"
    ],
    "–≥–æ—Ä–æ–¥ –®—ã–º–∫–µ–Ω—Ç": [
        "–®—ã–º–∫–µ–Ω—Ç", "–≥. –®—ã–º–∫–µ–Ω—Ç", "–≥.–®—ã–º–∫–µ–Ω—Ç", "Shymkent", "Shymkent city"
    ]
};

// –§—É–Ω–∫—Ü–∏—è –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏ (—É–ª—É—á—à–µ–Ω–Ω–∞—è)
function normalizeRegionNames(text) {
    let normalized = text;
    const lowerText = text.toLowerCase();
    
    // –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ –∫–∞–∂–¥–æ–º—É –∫–∞–Ω–æ–Ω–∏—á–µ—Å–∫–æ–º—É –Ω–∞–∑–≤–∞–Ω–∏—é
    for (const [canonical, variants] of Object.entries(REGION_MAPPING)) {
        // –°–æ—Ä—Ç–∏—Ä—É–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç –¥–ª–∏–Ω–Ω—ã—Ö –∫ –∫–æ—Ä–æ—Ç–∫–∏–º (–¥–ª—è —Ç–æ—á–Ω–æ—Å—Ç–∏)
        const sortedVariants = variants.sort((a, b) => b.length - a.length);
        
        for (const variant of sortedVariants) {
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º word boundary –¥–ª—è —Ç–æ—á–Ω–æ—Å—Ç–∏
            const regex = new RegExp(`\\b${variant.replace(/[.*+?^${}()|[\]\\]/g, '\\$&')}\\b`, 'gi');
            
            if (regex.test(normalized)) {
                normalized = normalized.replace(regex, canonical);
                console.log(`üìç –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è: "${variant}" ‚Üí "${canonical}"`);
                break; // –ù–∞—à–ª–∏ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —Ä–µ–≥–∏–æ–Ω—É
            }
        }
    }
    
    return normalized;
}

function showPending(text) {
    const list = chatEl();
    if (!list) return;
    // —Å–æ–∑–¥–∞—ë–º msg –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –∫–∞–∫ —É –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞
    const msg = document.createElement('div');
    msg.className = 'msg msg--assistant pending';

    const bubble = document.createElement('div');
    bubble.className = 'msg__bubble';
    // –ø—Ä–æ—Å—Ç–æ–π —Å–ø–∏–Ω–Ω–µ—Ä (inline SVG) + —Ç–µ–∫—Å—Ç
    bubble.innerHTML =
        '<span class="spin" style="display:inline-block;vertical-align:-2px;margin-right:8px;width:16px;height:16px">' +
        '<svg viewBox="0 0 50 50" style="width:16px;height:16px"><circle cx="25" cy="25" r="20" fill="none" stroke="currentColor" stroke-width="5" stroke-linecap="round" stroke-dasharray="31.4 188.4"><animateTransform attributeName="transform" type="rotate" from="0 25 25" to="360 25 25" dur="1s" repeatCount="indefinite"/></circle></svg>' +
        '</span>' +
        '<span class="pending-text"></span>';

    bubble.querySelector('.pending-text').textContent = text || '–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å‚Ä¶';
    msg.appendChild(bubble);
    list.appendChild(msg);
    pendingMsgEl = msg;
    scrollChatToBottom();
}

function updatePending(text) {
    if (!pendingMsgEl) return;
    const el = pendingMsgEl.querySelector('.pending-text');
    if (el) el.textContent = text;
}

function removePending() {
    if (!pendingMsgEl) return;
    const parent = pendingMsgEl.parentNode;
    if (parent) parent.removeChild(pendingMsgEl);
    pendingMsgEl = null;
}

function chatEl() {
    return document.getElementById('chatHistoryList');
}

function scrollChatToBottom() {
    const el = chatEl();
    if (!el) return;
    el.scrollTop = el.scrollHeight;
}

function renderMessageBubble(role, text, timestampSec) {
    const el = chatEl();
    if (!el) return;

    // --- helpers –≤–Ω—É—Ç—Ä–∏ —Ñ—É–Ω–∫—Ü–∏–∏ ---
    // –¥–æ–±–∞–≤–ª—è–µ—Ç –≤ container —Ç–µ–∫—Å—Ç, –ø—Ä–µ–≤—Ä–∞—â–∞—è plain-URL –≤ <a>
    function appendWithPlainLinks(container, raw) {
        const urlRe = /(https?:\/\/[^\s<>()]+|www\.[^\s<>()]+)/gi;
        let i = 0, m;
        while ((m = urlRe.exec(raw)) !== null) {
            if (m.index > i) container.appendChild(document.createTextNode(raw.slice(i, m.index)));

            let visible = m[0];
            let href = /^https?:\/\//i.test(visible) ? visible : 'https://' + visible;

            // —Å—Ä–µ–∑–∞–µ–º —Ö–≤–æ—Å—Ç–æ–≤—É—é –ø—É–Ω–∫—Ç—É–∞—Ü–∏—é –∏–∑ href, –Ω–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –µ—ë –∫–∞–∫ —Ç–µ–∫—Å—Ç
            const cut = href.match(/^(.*?)([)\].,!?:;]+)$/);
            let tail = "";
            if (cut) { href = cut[1]; tail = cut[2]; visible = visible.replace(/([)\].,!?:;]+)$/, ''); }

            const a = document.createElement('a');
            a.href = href;
            a.target = '_blank';
            a.rel = 'noopener noreferrer';
            a.textContent = visible;
            container.appendChild(a);

            if (tail) container.appendChild(document.createTextNode(tail));
            i = m.index + m[0].length;
        }
        if (i < raw.length) container.appendChild(document.createTextNode(raw.slice(i)));
    }

    // —Å–Ω–∞—á–∞–ª–∞ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º markdown-—Å—Å—ã–ª–∫–∏, –æ—Å—Ç–∞—Ç–∫–∏ ‚Äî —á–µ—Ä–µ–∑ plain-URL
    function appendWithMarkdownThenLinks(container, raw) {
        const mdRe = /\[([^\]]+)\]\((https?:\/\/[^\s)]+)\)/g;
        let i = 0, m;
        while ((m = mdRe.exec(raw)) !== null) {
            if (m.index > i) appendWithPlainLinks(container, raw.slice(i, m.index));
            const a = document.createElement('a');
            a.href = m[2];
            a.target = '_blank';
            a.rel = 'noopener noreferrer';
            a.textContent = m[1];
            container.appendChild(a);
            i = m.index + m[0].length;
        }
        if (i < raw.length) appendWithPlainLinks(container, raw.slice(i));
    }
    // --- /helpers ---

    const msg = document.createElement('div');
    msg.className = 'msg ' + (role === 'user' ? 'msg--user' : 'msg--assistant');

    const bubble = document.createElement('div');
    bubble.className = 'msg__bubble';

    // –±–µ–∑–æ–ø–∞—Å–Ω–æ –¥–æ–±–∞–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç —Å –∫–ª–∏–∫–∞–±–µ–ª—å–Ω—ã–º–∏ —Å—Å—ã–ª–∫–∞–º–∏
    appendWithMarkdownThenLinks(bubble, String(text ?? '').trim());

    // (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ) –º–∏–Ω–∏-—Ç–∞–π–º—Å—Ç–µ–º–ø
    if (timestampSec) {
        const small = document.createElement('small');
        small.style.display = 'block';
        small.style.opacity = '0.6';
        small.style.marginTop = '4px';
        small.textContent = new Date(timestampSec * 1000).toLocaleTimeString();
        bubble.appendChild(small);
    }

    msg.appendChild(bubble);
    el.appendChild(msg);
}


function appendUserMessage(text) {
    renderMessageBubble('user', text);
    scrollChatToBottom();
}

function appendAssistantMessage(text) {
    renderMessageBubble('assistant', text);
    scrollChatToBottom();
}

// –∑–∞–≥—Ä—É–∑–∫–∞ –≤—Å–µ–π –∏—Å—Ç–æ—Ä–∏–∏ –∏–∑ backend-–∞ (–ø–æ —Ç–µ–∫—É—â–µ–º—É threadId)
async function fetchAndRenderThreadMessages() {
    const el = chatEl();
    if (!el || !threadId) return;
    try {
        const res = await fetch(`/api/threads/${threadId}/messages`);
        if (!res.ok) throw new Error('Failed to load messages');
        const payload = await res.json();

        // –æ—á–∏—â–∞–µ–º –∏ —Ä–µ–Ω–¥–µ—Ä–∏–º –ø–æ –≤–æ–∑—Ä–∞—Å—Ç–∞–Ω–∏—é –≤—Ä–µ–º–µ–Ω–∏
        el.innerHTML = '';
        const items = (payload.data || []).slice().sort((a, b) => a.created_at - b.created_at);

        for (const m of items) {
            const role = m.role === 'user' ? 'user' : 'assistant';
            const block = (m.content && m.content[0] && m.content[0].type === 'text')
                ? m.content[0].text.value
                : '';
            renderMessageBubble(role, block, m.created_at);
        }
        scrollChatToBottom();
    } catch (err) {
        console.error('fetchAndRenderThreadMessages error:', err);
    }
}


// Connect to avatar service
function connectAvatar() {
    const cogSvcRegion = document.getElementById('region').value;
    const cogSvcSubKey = document.getElementById('APIKey').value;
    if (cogSvcSubKey === '') {
        alert('Please fill in the API key of your speech resource.');
        return;
    }
    const privateEndpointEnabled = document.getElementById('enablePrivateEndpoint').checked;
    const privateEndpoint = document.getElementById('privateEndpoint').value.slice(8);
    if (privateEndpointEnabled && privateEndpoint === '') {
        alert('Please fill in the Azure Speech endpoint.');
        return;
    }
    let speechSynthesisConfig;
    if (privateEndpointEnabled) {
        speechSynthesisConfig = SpeechSDK.SpeechConfig.fromEndpoint(new URL(`wss://${privateEndpoint}/tts/cognitiveservices/websocket/v1?enableTalkingAvatar=true`), cogSvcSubKey);
    } else {
        speechSynthesisConfig = SpeechSDK.SpeechConfig.fromSubscription(cogSvcSubKey, cogSvcRegion);
    }
    speechSynthesisConfig.endpointId = document.getElementById('customVoiceEndpointId').value;
    const talkingAvatarCharacter = document.getElementById('talkingAvatarCharacter').value;
    const talkingAvatarStyle = document.getElementById('talkingAvatarStyle').value;
    const avatarConfig = new SpeechSDK.AvatarConfig(talkingAvatarCharacter, talkingAvatarStyle);
    avatarConfig.customized = document.getElementById('customizedAvatar').checked;
    avatarConfig.useBuiltInVoice = document.getElementById('useBuiltInVoice').checked;
    avatarSynthesizer = new SpeechSDK.AvatarSynthesizer(speechSynthesisConfig, avatarConfig);
    avatarSynthesizer.avatarEventReceived = function (s, e) {
        var offsetMessage = ", offset from session start: " + e.offset / 10000 + "ms.";
        if (e.offset === 0) {
            offsetMessage = "";
        }
        console.log("Event received: " + e.description + offsetMessage);
    };
    let speechRecognitionConfig;
    if (privateEndpointEnabled) {
        speechRecognitionConfig = SpeechSDK.SpeechConfig.fromEndpoint(new URL(`wss://${privateEndpoint}/stt/speech/universal/v2`), cogSvcSubKey);
    } else {
        speechRecognitionConfig = SpeechSDK.SpeechConfig.fromEndpoint(new URL(`wss://${cogSvcRegion}.stt.speech.microsoft.com/speech/universal/v2`), cogSvcSubKey);
    }
    // speechRecognitionConfig.setProperty(SpeechSDK.PropertyId.SpeechServiceConnection_LanguageIdMode, "Continuous");
    // var sttLocales = document.getElementById('sttLocales').value.split(',');
    // var autoDetectSourceLanguageConfig = SpeechSDK.AutoDetectSourceLanguageConfig.fromLanguages(sttLocales);
    // speechRecognizer = SpeechSDK.SpeechRecognizer.FromConfig(speechRecognitionConfig, autoDetectSourceLanguageConfig, SpeechSDK.AudioConfig.fromDefaultMicrophoneInput());
    speechRecognizer = null;
    
    if (!messageInitiated) {
        initMessages();
        messageInitiated = true;
    }
    document.getElementById('startSession').disabled = true;
    document.getElementById('configuration').hidden = true;
    const xhr = new XMLHttpRequest();
    if (privateEndpointEnabled) {
        xhr.open("GET", `https://${privateEndpoint}/tts/cognitiveservices/avatar/relay/token/v1`);
    } else {
        xhr.open("GET", `https://${cogSvcRegion}.tts.speech.microsoft.com/cognitiveservices/avatar/relay/token/v1`);
    }
    xhr.setRequestHeader("Ocp-Apim-Subscription-Key", cogSvcSubKey);
    xhr.addEventListener("readystatechange", function () {
        if (this.readyState === 4) {
            const responseData = JSON.parse(this.responseText);
            const iceServerUrl = responseData.Urls[0];
            const iceServerUsername = responseData.Username;
            const iceServerCredential = responseData.Password;
            setupWebRTC(iceServerUrl, iceServerUsername, iceServerCredential);
        }
    });
    xhr.send();
}

function disconnectAvatar() {
    if (avatarSynthesizer !== undefined) {
        avatarSynthesizer.close();
    }
    if (speechRecognizer !== undefined) {
        speechRecognizer.stopContinuousRecognitionAsync();
        speechRecognizer.close();
    }
    sessionActive = false;
}

function setupWebRTC(iceServerUrl, iceServerUsername, iceServerCredential) {
    peerConnection = new RTCPeerConnection({
        iceServers: [{
            urls: [iceServerUrl],
            username: iceServerUsername,
            credential: iceServerCredential
        }]
    });
    peerConnection.ontrack = function (event) {
        if (event.track.kind === 'audio') {
            let audioElement = document.createElement('audio');
            audioElement.id = 'audioPlayer';
            audioElement.srcObject = event.streams[0];
            audioElement.autoplay = false;
            audioElement.addEventListener('loadeddata', () => {
                audioElement.play();
            });
            audioElement.onplaying = () => {
                console.log(`WebRTC ${event.track.kind} channel connected.`);
            };
            remoteVideoDiv = document.getElementById('remoteVideo');
            for (var i = 0; i < remoteVideoDiv.childNodes.length; i++) {
                if (remoteVideoDiv.childNodes[i].localName === event.track.kind) {
                    remoteVideoDiv.removeChild(remoteVideoDiv.childNodes[i]);
                }
            }
            document.getElementById('remoteVideo').appendChild(audioElement);
        }
        if (event.track.kind === 'video') {
            let videoElement = document.createElement('video');
            videoElement.id = 'videoPlayer';
            videoElement.srcObject = event.streams[0];
            videoElement.autoplay = false;
            videoElement.addEventListener('loadeddata', () => {
                videoElement.play();
            });
            videoElement.playsInline = true;
            videoElement.style.width = '0.5px';
            document.getElementById('remoteVideo').appendChild(videoElement);
            if (repeatSpeakingSentenceAfterReconnection) {
                if (speakingText !== '') {
                    speakNext(speakingText, 0, true);
                }
            } else {
                if (spokenTextQueue.length > 0) {
                    speakNext(spokenTextQueue.shift());
                }
            }
            videoElement.onplaying = () => {
                remoteVideoDiv = document.getElementById('remoteVideo');
                for (var i = 0; i < remoteVideoDiv.childNodes.length; i++) {
                    if (remoteVideoDiv.childNodes[i].localName === event.track.kind) {
                        remoteVideoDiv.removeChild(remoteVideoDiv.childNodes[i]);
                    }
                }
                videoElement.style.width = '960px';
                document.getElementById('remoteVideo').appendChild(videoElement);
                console.log(`WebRTC ${event.track.kind} channel connected.`);

                // üéØ –ê–ö–¢–ò–í–ò–†–£–ï–ú –û–ë–ï–ò–ï –ö–ù–û–ü–ö–ò –ú–ò–ö–†–û–§–û–ù–ê
                document.getElementById('microphoneRussian').disabled = false;
                document.getElementById('microphoneKazakh').disabled = false;
                document.getElementById('microphoneEnglish').disabled = false;
                document.getElementById('stopSession').disabled = false;
                document.getElementById('remoteVideo').style.width = '960px';
                document.getElementById('showTypeMessage').disabled = false;

                if (document.getElementById('useLocalVideoForIdle').checked) {
                    document.getElementById('localVideo').hidden = true;
                    if (lastSpeakTime === undefined) {
                        lastSpeakTime = new Date();
                    }
                }
                isReconnecting = false;
                setTimeout(() => { sessionActive = true; }, 5000);
            };
        }
    };
    peerConnection.addEventListener("datachannel", event => {
        peerConnectionDataChannel = event.channel;
        peerConnectionDataChannel.onmessage = e => {
            let subtitles = document.getElementById('subtitles');
            const webRTCEvent = JSON.parse(e.data);
            if (webRTCEvent.event.eventType === 'EVENT_TYPE_TURN_START' && document.getElementById('showSubtitles').checked) {
                subtitles.hidden = false;
                subtitles.innerHTML = speakingText;
            } else if (webRTCEvent.event.eventType === 'EVENT_TYPE_SESSION_END' || webRTCEvent.event.eventType === 'EVENT_TYPE_SWITCH_TO_IDLE') {
                subtitles.hidden = true;
                if (webRTCEvent.event.eventType === 'EVENT_TYPE_SESSION_END') {
                    if (document.getElementById('autoReconnectAvatar').checked && !userClosedSession && !isReconnecting) {
                        if (new Date() - lastInteractionTime < 300000) {
                            console.log(`[${(new Date()).toISOString()}] The WebSockets got disconnected, need reconnect.`);
                            isReconnecting = true;
                            peerConnectionDataChannel.onmessage = null;
                            if (avatarSynthesizer !== undefined) {
                                avatarSynthesizer.close();
                            }
                            connectAvatar();
                        }
                    }
                }
            }
            console.log("[" + (new Date()).toISOString() + "] WebRTC event received: " + e.data);
        };
    });
    var c = peerConnection.createDataChannel("eventChannel");
    peerConnection.oniceconnectionstatechange = e => {
        console.log("WebRTC status: " + peerConnection.iceConnectionState);
        if (peerConnection.iceConnectionState === 'disconnected') {
            if (document.getElementById('useLocalVideoForIdle').checked) {
                document.getElementById('localVideo').hidden = false;
                document.getElementById('remoteVideo').style.width = '0.1px';
            }
        }
    };
    peerConnection.addTransceiver('video', { direction: 'sendrecv' });
    peerConnection.addTransceiver('audio', { direction: 'sendrecv' });
    avatarSynthesizer.startAvatarAsync(peerConnection).then((r) => {
        if (r.reason === SpeechSDK.ResultReason.SynthesizingAudioCompleted) {
            console.log("[" + (new Date()).toISOString() + "] Avatar started. Result ID: " + r.resultId);
        } else {
            console.log("[" + (new Date()).toISOString() + "] Unable to start avatar. Result ID: " + r.resultId);
            if (r.reason === SpeechSDK.ResultReason.Canceled) {
                let cancellationDetails = SpeechSDK.CancellationDetails.fromResult(r);
                if (cancellationDetails.reason === SpeechSDK.CancellationReason.Error) {
                    console.log(cancellationDetails.errorDetails);
                }
                console.log("Unable to start avatar: " + cancellationDetails.errorDetails);
            }
            document.getElementById('startSession').disabled = false;
            document.getElementById('configuration').hidden = false;
        }
    }).catch(
        (error) => {
            console.log("[" + (new Date()).toISOString() + "] Avatar failed to start. Error: " + error);
            document.getElementById('startSession').disabled = false;
            document.getElementById('configuration').hidden = false;
        }
    );
}

function initMessages() {
    messages = [];
    if (dataSources.length === 0) {
        let systemPrompt = document.getElementById('prompt').value;
        let systemMessage = {
            role: 'system',
            content: systemPrompt
        };
        messages.push(systemMessage);
    }
}

async function createThread(userQuery) {
    try {
        // const systemPrompt = getSystemPromptWithLanguage(selectedLanguage);
        const langInstruction = {
            ru: "[–ò–ù–°–¢–†–£–ö–¶–ò–Ø: –û—Ç–≤–µ—Ç—å –Ω–∞ –†–£–°–°–ö–û–ú —è–∑—ã–∫–µ. –í—Å–µ –∑–∞–ø—Ä–æ—Å—ã –∫ —Ñ—É–Ω–∫—Ü–∏—è–º —Ñ–æ—Ä–º—É–ª–∏—Ä—É–π –Ω–∞ —Ä—É—Å—Å–∫–æ–º.]",
            kk: "[–ù“∞–°“ö–ê–£–õ–´“ö: “ö–ê–ó–ê“ö —Ç—ñ–ª—ñ–Ω–¥–µ –∂–∞—É–∞–ø –±–µ—Ä—ñ“£—ñ–∑. –ë–∞—Ä–ª—ã“õ —Ñ—É–Ω–∫—Ü–∏—è —Å“±—Ä–∞—É–ª–∞—Ä—ã–Ω –æ—Ä—ã—Å —Ç—ñ–ª—ñ–Ω–¥–µ –∂–∞—Å–∞“£—ã–∑.]",
            en: "[INSTRUCTION: Respond in ENGLISH language. Formulate all function queries in Russian language.]"
        };
        
        const userMessageWithLang = `${langInstruction[selectedLanguage]}\n\n${userQuery}`;
        
        const response = await fetch(`/api/threads`, {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({
                messages: [{ role: 'user', content: userMessageWithLang }]
            })
        });
        if (!response.ok) {
            const errorData = await response.json();
            throw new Error(`Proxy error: ${errorData.error || response.statusText}`);
        }
        const thread = await response.json();
        threadId = thread.id;
        fetchAndRenderThreadMessages();
        showPending('–û—Ç–ø—Ä–∞–≤–∏–ª–∏ –∑–∞–ø—Ä–æ—Å‚Ä¶');
        console.log('Thread created via proxy:', threadId);
        runAssistant();

    } catch (error) {
        console.error('Error creating thread:', error);
        displayError('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –±–µ—Å–µ–¥—ã');
    }
}

function htmlEncode(text) {
    const entityMap = {
        '&': '&amp;', '<': '&lt;', '>': '&gt;', '"': '&quot;', "'": '&#39;', '/': '&#x2F;'
    };
    return String(text).replace(/[&<>"'\/]/g, (match) => entityMap[match]);
}

function speak(text, endingSilenceMs = 0) {
    if (isSpeaking) {
        spokenTextQueue.push(text);
        return;
    }
    speakNext(text, endingSilenceMs);
}

function speakNext(text, endingSilenceMs = 0, skipUpdatingChatHistory = false) {
    let ttsVoice = document.getElementById('ttsVoice').value;
    let ssml = `<speak version='1.0' xmlns='http://www.w3.org/2001/10/synthesis' xmlns:mstts='http://www.w3.org/2001/mstts' xml:lang='en-US'><voice name='${ttsVoice}'><mstts:leadingsilence-exact value='0'/>${htmlEncode(text)}</voice></speak>`;
    if (endingSilenceMs > 0) {
        ssml = `<speak version='1.0' xmlns='http://www.w3.org/2001/10/synthesis' xmlns:mstts='http://www.w3.org/2001/mstts' xml:lang='en-US'><voice name='${ttsVoice}'><mstts:leadingsilence-exact value='0'/>${htmlEncode(text)}<break time='${endingSilenceMs}ms' /></voice></speak>`;
    }
    lastSpeakTime = new Date();
    isSpeaking = true;
    speakingText = text;
    document.getElementById('stopSpeaking').disabled = false;
    avatarSynthesizer.speakSsmlAsync(ssml).then(
        (result) => {
            if (result.reason === SpeechSDK.ResultReason.SynthesizingAudioCompleted) {
                console.log(`Speech synthesized to speaker for text [ ${text} ]. Result ID: ${result.resultId}`);
                lastSpeakTime = new Date();
            } else {
                console.log(`Error occurred while speaking the SSML. Result ID: ${result.resultId}`);
            }
            speakingText = '';
            if (spokenTextQueue.length > 0) {
                speakNext(spokenTextQueue.shift());
            } else {
                isSpeaking = false;
                document.getElementById('stopSpeaking').disabled = true;
            }
        }).catch(
            (error) => {
                console.log(`Error occurred while speaking the SSML: [ ${error} ]`);
                speakingText = '';
                if (spokenTextQueue.length > 0) {
                    speakNext(spokenTextQueue.shift());
                } else {
                    isSpeaking = false;
                    document.getElementById('stopSpeaking').disabled = true;
                }
            }
        );
}

function stopSpeaking() {
    lastInteractionTime = new Date();
    spokenTextQueue = [];
    avatarSynthesizer.stopSpeakingAsync().then(
        () => {
            isSpeaking = false;
            document.getElementById('stopSpeaking').disabled = true;
            console.log("[" + (new Date()).toISOString() + "] Stop speaking request sent.");
        }
    ).catch(
        (error) => {
            console.log("Error occurred while stopping speaking: " + error);
        }
    );
}

// –ù–û–í–ê–Ø –§–£–ù–ö–¶–ò–Ø: –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º —è–∑—ã–∫–æ–º
function handleUserQuery(userQuery, userQueryHTML = "", imgUrlPath = "", language = "ru") {
    lastInteractionTime = new Date();
    selectedLanguage = language;
    console.log(`üåê –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª —è–∑—ã–∫: ${selectedLanguage}`);
    console.log(`üó£Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–∫–∞–∑–∞–ª: "${userQuery}"`);

    // –ù–û–í–û–ï: –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –Ω–∞–∑–≤–∞–Ω–∏—è —Ä–µ–≥–∏–æ–Ω–æ–≤
    const normalizedQuery = normalizeRegionNames(userQuery);

    if (isSpeaking) {
        stopSpeaking();
    }

    if (!threadId) {
        createThread(normalizedQuery);
    } else {
        addMessageToThread(normalizedQuery);
    }
}

async function addMessageToThread(userQuery) {
    try {
        const langInstruction = {
            ru: "[–ò–ù–°–¢–†–£–ö–¶–ò–Ø: –û—Ç–≤–µ—Ç—å –Ω–∞ –†–£–°–°–ö–û–ú —è–∑—ã–∫–µ. –í—Å–µ –∑–∞–ø—Ä–æ—Å—ã –∫ —Ñ—É–Ω–∫—Ü–∏—è–º —Ñ–æ—Ä–º—É–ª–∏—Ä—É–π –Ω–∞ —Ä—É—Å—Å–∫–æ–º.]",
            kk: "[–ù“∞–°“ö–ê–£–õ–´“ö: “ö–ê–ó–ê“ö —Ç—ñ–ª—ñ–Ω–¥–µ –∂–∞—É–∞–ø –±–µ—Ä—ñ“£—ñ–∑. –ë–∞—Ä–ª—ã“õ —Ñ—É–Ω–∫—Ü–∏—è —Å“±—Ä–∞—É–ª–∞—Ä—ã–Ω –æ—Ä—ã—Å —Ç—ñ–ª—ñ–Ω–¥–µ –∂–∞—Å–∞“£—ã–∑.]",
            en: "[INSTRUCTION: Respond in ENGLISH language. Formulate all function queries in Russian language.]"
        };
        
        const userMessageWithLang = `${langInstruction[selectedLanguage]}\n\n${userQuery}`;
        
        const response = await fetch(`/api/threads/${threadId}/messages`, {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ role: 'user', content: userMessageWithLang })
        });
        if (!response.ok) throw new Error('Failed to add message');
        console.log('Message added to thread via proxy');
        showPending('–û—Ç–ø—Ä–∞–≤–∏–ª–∏ –∑–∞–ø—Ä–æ—Å‚Ä¶');
        runAssistant();
    } catch (error) {
        console.error('Error adding message:', error);
        displayError('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è');
    }
}

async function runAssistant() {
    try {
        const response = await fetch(`/api/threads/${threadId}/runs`, {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ assistant_id: assistantId })
        });
        if (!response.ok) throw new Error('Failed to run assistant');
        const run = await response.json();
        runId = run.id;
        console.log('Assistant run started via proxy:', runId);
        checkRunStatus();
    } catch (error) {
        console.error('Error running assistant:', error);
        displayError('–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞');
    }
}

async function checkRunStatus() {
    try {
        const response = await fetch(`/api/threads/${threadId}/runs/${runId}`);
        if (!response.ok) throw new Error('Failed to check run status');
        const status = await response.json();
        console.log('Run status:', status.status);

        if (status.status === 'completed') {
            removePending();
            getAssistantResponse();
        } else if (status.status === 'requires_action') {
            updatePending('–ò—â–µ–º –ø–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º‚Ä¶');
            handleFunctionCalls(status.required_action.submit_tool_outputs.tool_calls);
        } else if (status.status === 'in_progress' || status.status === 'queued') {
            updatePending('–î—É–º–∞—é‚Ä¶');
            setTimeout(checkRunStatus, 1000);
        } else if (status.status === 'failed') {
            updatePending('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞');
            // —á–µ—Ä–µ–∑ –ø–∞—Ä—É —Å–µ–∫—É–Ω–¥ —É–±–µ—Ä—ë–º –∑–∞–≥–ª—É—à–∫—É
            setTimeout(removePending, 2000);
        } else {
            setTimeout(checkRunStatus, 1000);
        }

    } catch (error) {
        console.error('Error checking status:', error);
        displayError('–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞');
    }
}

async function handleFunctionCalls(toolCalls) {
    const toolOutputs = [];
    for (const toolCall of toolCalls) {
        if (toolCall.type === 'function') {
            try {
                console.log('Calling function via endpoint:', toolCall.function.name, "with arguments:", toolCall.function.arguments);
                const functionResponse = await fetch(functionCallsEndpoint, {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({
                        function_name: toolCall.function.name,
                        arguments: JSON.parse(toolCall.function.arguments)
                    })
                });
                const result = await functionResponse.json();
                console.log('Function result:', result);

                toolOutputs.push({
                    tool_call_id: toolCall.id,
                    output: JSON.stringify(result.success ? result.result : { error: result.error })
                });
            } catch (error) {
                console.error('Error calling function:', error);
                toolOutputs.push({
                    tool_call_id: toolCall.id,
                    output: JSON.stringify({ error: error.message })
                });
            }
        }
    }
    submitToolOutputs(toolOutputs);
}

async function submitToolOutputs(toolOutputs) {
    try {
        const response = await fetch(`/api/threads/${threadId}/runs/${runId}/submit_tool_outputs`, {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ tool_outputs: toolOutputs })
        });
        if (!response.ok) throw new Error('Failed to submit tool outputs');
        console.log('Submitted tool outputs successfully');
        setTimeout(checkRunStatus, 1000);
    } catch (error) {
        console.error('Error submitting tool outputs:', error);
        displayError('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤');
    }
}

async function getAssistantResponse() {
    try {
        const response = await fetch(`/api/threads/${threadId}/messages`);
        if (!response.ok) throw new Error('Failed to get messages');
        const messagesData = await response.json();
        const assistantMessage = messagesData.data.find(msg => msg.role === 'assistant' && msg.run_id === runId);

        if (assistantMessage && assistantMessage.content[0]) {
            const responseText = assistantMessage.content[0].text.value;
            removePending();
            console.log('Assistant response:', responseText.substring(0, 100) + "...");
            appendAssistantMessage(responseText);
            displayAndSpeakResponse(responseText, selectedLanguage);
        } else {
            const lastAssistantMessage = messagesData.data.find(msg => msg.role === 'assistant');
            if (lastAssistantMessage && lastAssistantMessage.content[0]) {
                const responseText = lastAssistantMessage.content[0].text.value;
                console.log('Assistant response (fallback):', responseText.substring(0, 100) + "...");
                removePending();
                appendAssistantMessage(responseText);
                displayAndSpeakResponse(responseText, selectedLanguage);
            } else {
                displayError('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞');
            }
        }
    } catch (error) {
        console.error('Error getting response:', error);
        displayError('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–∞');
    }
}

function cleanTextForTTS(rawText, lang) {
    let t = String(rawText);
    
    t = t.replace(/https?:\/\/[^\s<>()]+/gi, '');
    t = t.replace(/www\.[^\s<>()]+/gi, '');
    
    t = t.replace(/\*\*([^*]+)\*\*/g, '$1'); // **–∂–∏—Ä–Ω—ã–π** ‚Üí –∂–∏—Ä–Ω—ã–π
    t = t.replace(/\*([^*]+)\*/g, '$1');     // *–∫—É—Ä—Å–∏–≤* ‚Üí –∫—É—Ä—Å–∏–≤
    t = t.replace(/_([^_]+)_/g, '$1');       // _–ø–æ–¥—á–µ—Ä–∫_ ‚Üí –ø–æ–¥—á–µ—Ä–∫
    t = t.replace(/#+\s*/g, '');             // ### –∑–∞–≥–æ–ª–æ–≤–∫–∏ —É–±–∏—Ä–∞–µ–º
    t = t.replace(/`([^`]+)`/g, '$1');       // `–∫–æ–¥` ‚Üí –∫–æ–¥
    
    t = t.replace(/[\/\\]/g, ' ');
    t = t.replace(/[‚Ññ%()\-‚Äì‚Äî_:;[\]{}<>¬´¬ª]/g, ' ');
    t = t.replace(/\.{2,}/g, '.');
    t = t.replace(/!{2,}/g, '!');
    t = t.replace(/\?{2,}/g, '?');
    
    t = t.replace(/\|/g, ' ');               // —Ç–∞–±–ª–∏—Ü—ã
    t = t.replace(/>/g, ' ');                // —Ü–∏—Ç–∞—Ç—ã >
    t = t.replace(/\+/g, '–ø–ª—é—Å');            // + —á–∏—Ç–∞–µ—Ç—Å—è –ª—É—á—à–µ –∫–∞–∫ "–ø–ª—é—Å"
    t = t.replace(/=/g, ' —Ä–∞–≤–Ω–æ ');          // = ‚Üí "—Ä–∞–≤–Ω–æ"
    t = t.replace(/&/g, ' –∏ ');              // & ‚Üí "–∏"
    t = t.replace(/@/g, ' —Å–æ–±–∞–∫–∞ ');         // @ ‚Üí "—Å–æ–±–∞–∫–∞"
    t = t.replace(/~/g, ' ');                // —Ç–∏–ª—å–¥–∞
    t = t.replace(/\^/g, ' ');               // —Å—Ç–µ–ø–µ–Ω—å
    
    t = t.replace(/\s+/g, ' ').trim();
    
    console.log(`üßπ –û—á–∏—Å—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ (${lang}): "${rawText.substring(0, 50)}..." ‚Üí "${t.substring(0, 50)}..."`);
    return t;
}

// üéØ –ì–õ–ê–í–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø: –û–∑–≤—É—á–∫–∞ —Å –≤—ã–±—Ä–∞–Ω–Ω—ã–º —è–∑—ã–∫–æ–º
function displayAndSpeakResponse(text, language) {
    if (muteWhileRecording) {
        console.log('üîá Mic active: skip TTS');
        return;
    }

    let finalText = text;

    // –£–±—Ä–∞–ª–∏ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ - —Å—Ä–∞–∑—É –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ–ª—É—á–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
    console.log(`üåç –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —è–∑—ã–∫: ${language}`);

    // –û—á–∏—Å—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞
    const cleaned = cleanTextForTTS(finalText, language);

    // üéØ –í–´–ë–û–† –ì–û–õ–û–°–ê –ü–û –Ø–ó–´–ö–£
    let ttsVoice, xmlLang;
    if (language === "kk") {
        ttsVoice = "kk-KZ-AigulNeural";
        xmlLang = "kk-KZ";
    } else if (language === "en") {
        ttsVoice = "en-US-AriaNeural";
        xmlLang = "en-US";
    } else {
        ttsVoice = "ru-RU-SvetlanaNeural";
        xmlLang = "ru-RU";
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –≤ UI
    document.getElementById('ttsVoice').value = ttsVoice;

    // –°–æ–±–∏—Ä–∞–µ–º SSML
    const ssml = `<speak version='1.0' xmlns='http://www.w3.org/2001/10/synthesis' xmlns:mstts='http://www.w3.org/2001/mstts' xml:lang='${xmlLang}'>
        <voice name='${ttsVoice}'><mstts:leadingsilence-exact value='0'/>${htmlEncode(cleaned)}</voice>
    </speak>`;

    // –û—á–µ—Ä–µ–¥—å –æ–∑–≤—É—á–∫–∏
    if (isSpeaking) {
        spokenTextQueue.push({ text: cleaned, lang: language });
        return;
    }

    lastSpeakTime = new Date();
    isSpeaking = true;
    speakingText = cleaned;
    document.getElementById('stopSpeaking').disabled = false;

    console.log(`üîä Voice: ${ttsVoice}, Lang: ${language}`);
    console.log(`üó£Ô∏è TTS text: "${cleaned}"`);

    avatarSynthesizer.speakSsmlAsync(ssml).then(
        () => {
            speakingText = '';
            if (spokenTextQueue.length > 0) {
                const nextItem = spokenTextQueue.shift();
                displayAndSpeakResponse(nextItem.text, nextItem.lang);
            } else {
                isSpeaking = false;
                document.getElementById('stopSpeaking').disabled = true;
            }
        }
    ).catch((error) => {
        console.error("–û—à–∏–±–∫–∞ —Å–∏–Ω—Ç–µ–∑–∞ —Ä–µ—á–∏:", error);
        speakingText = '';
        if (spokenTextQueue.length > 0) {
            const nextItem = spokenTextQueue.shift();
            displayAndSpeakResponse(nextItem.text, nextItem.lang);
        } else {
            isSpeaking = false;
            document.getElementById('stopSpeaking').disabled = true;
        }
    });
}

function displayError(message) {
    console.error('Error:', message);
}

// üéØ –ù–û–í–´–ï –§–£–ù–ö–¶–ò–ò: –î–≤–µ –∫–Ω–æ–ø–∫–∏ –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞
window.microphoneRussian = () => {
    console.log("üé§ –í—ã–±—Ä–∞–Ω —Ä—É—Å—Å–∫–∏–π –º–∏–∫—Ä–æ—Ñ–æ–Ω");
    startMicrophone("ru");
};

window.microphoneKazakh = () => {
    console.log("üé§ –í—ã–±—Ä–∞–Ω –∫–∞–∑–∞—Ö—Å–∫–∏–π –º–∏–∫—Ä–æ—Ñ–æ–Ω");
    startMicrophone("kk");
};

window.microphoneEnglish = () => {
    console.log("üé§ –í—ã–±—Ä–∞–Ω –∞–Ω–≥–ª–∏–π—Å–∫–∏–π –º–∏–∫—Ä–æ—Ñ–æ–Ω");
    startMicrophone("en");
};

function startMicrophone(language) {
    lastInteractionTime = new Date();
    selectedLanguage = language;

    const buttonMap = {
        ru: { id: 'microphoneRussian', label: '&#127897; –†—É—Å—Å–∫–∏–π', activeLabel: '‚èπ –†—É—Å—Å–∫–∏–π' },
        kk: { id: 'microphoneKazakh', label: '&#127897; “ö–∞–∑–∞“õ—à–∞', activeLabel: '‚èπ “ö–∞–∑–∞“õ—à–∞' },
        en: { id: 'microphoneEnglish', label: '&#127897; English', activeLabel: '‚èπ English' }
    };

    const currentButton = buttonMap[language];
    const buttonId = currentButton.id;

    // STOP: –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ
    if (document.getElementById(buttonId).innerHTML.includes('‚èπ')) {
        muteWhileRecording = false;
        const ap = document.getElementById('audioPlayer');
        if (ap) ap.muted = false;
        document.getElementById(buttonId).disabled = true;
        speechRecognizer.stopContinuousRecognitionAsync(
            () => {
                document.getElementById(buttonId).innerHTML = currentButton.label;
                document.getElementById(buttonId).disabled = false;
                
                for (let key in buttonMap) {
                    document.getElementById(buttonMap[key].id).disabled = false;
                }

                const finalText = sttBuffer.trim();
                sttBuffer = '';
                if (finalText) {
                    appendUserMessage(finalText);
                    handleUserQuery(finalText, "", "", selectedLanguage);
                }
            },
            (err) => {
                console.log("Failed to stop continuous recognition:", err);
                document.getElementById(buttonId).disabled = false;
            }
        );
        return;
    }

    // START
    if (document.getElementById('useLocalVideoForIdle').checked) {
        if (!sessionActive) connectAvatar();
        setTimeout(() => {
            if (document.getElementById('audioPlayer')) {
                document.getElementById('audioPlayer').play();
            }
        }, 5000);
    } else {
        if (document.getElementById('audioPlayer')) {
            document.getElementById('audioPlayer').play();
        }
    }

    for (let key in buttonMap) {
        document.getElementById(buttonMap[key].id).disabled = true;
    }

    // üéØ –ù–û–í–û–ï: –°–æ–∑–¥–∞—ë–º –Ω–æ–≤—ã–π —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞—Ç–µ–ª—å —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ —è–∑—ã–∫–∞–º–∏
    const cogSvcRegion = document.getElementById('region').value;
    const cogSvcSubKey = document.getElementById('APIKey').value;
    
    let speechRecognitionConfig;
    const privateEndpointEnabled = document.getElementById('enablePrivateEndpoint').checked;
    const privateEndpoint = document.getElementById('privateEndpoint').value.slice(8);
    
    if (privateEndpointEnabled) {
        speechRecognitionConfig = SpeechSDK.SpeechConfig.fromEndpoint(
            new URL(`wss://${privateEndpoint}/stt/speech/universal/v2`), 
            cogSvcSubKey
        );
    } else {
        speechRecognitionConfig = SpeechSDK.SpeechConfig.fromEndpoint(
            new URL(`wss://${cogSvcRegion}.stt.speech.microsoft.com/speech/universal/v2`), 
            cogSvcSubKey
        );
    }
    
    // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —è–∑—ã–∫–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞
    if (language === "en") {
        // –ê–Ω–≥–ª–∏–π—Å–∫–∏–π - —Å—Ç—Ä–æ–≥–æ –ë–ï–ó –∞–≤—Ç–æ–¥–µ—Ç–µ–∫—Ç–∞
        speechRecognitionConfig.setProperty(SpeechSDK.PropertyId.SpeechServiceConnection_LanguageIdMode, "Continuous");
        const autoDetectConfig = SpeechSDK.AutoDetectSourceLanguageConfig.fromLanguages(["en-US", "ru-RU"]);
        speechRecognizer = SpeechSDK.SpeechRecognizer.FromConfig(
            speechRecognitionConfig,
            autoDetectConfig,
            SpeechSDK.AudioConfig.fromDefaultMicrophoneInput()
        );
        console.log("üé§ STT —Ä–µ–∂–∏–º: English (strict, no auto-detect)");
    } else if (language === "ru") {
        // –†—É—Å—Å–∫–∏–π —Å fallback –Ω–∞ –∫–∞–∑–∞—Ö—Å–∫–∏–π
        speechRecognitionConfig.setProperty(SpeechSDK.PropertyId.SpeechServiceConnection_LanguageIdMode, "Continuous");
        const autoDetectConfig = SpeechSDK.AutoDetectSourceLanguageConfig.fromLanguages(["ru-RU", "kk-KZ"]);
        speechRecognizer = SpeechSDK.SpeechRecognizer.FromConfig(
            speechRecognitionConfig,
            autoDetectConfig,
            SpeechSDK.AudioConfig.fromDefaultMicrophoneInput()
        );
        console.log("üé§ STT —Ä–µ–∂–∏–º: Russian (primary) + Kazakh (fallback)");
    } else if (language === "kk") {
        // –ö–∞–∑–∞—Ö—Å–∫–∏–π —Å fallback –Ω–∞ —Ä—É—Å—Å–∫–∏–π
        speechRecognitionConfig.setProperty(SpeechSDK.PropertyId.SpeechServiceConnection_LanguageIdMode, "Continuous");
        const autoDetectConfig = SpeechSDK.AutoDetectSourceLanguageConfig.fromLanguages(["kk-KZ", "ru-RU"]);
        speechRecognizer = SpeechSDK.SpeechRecognizer.FromConfig(
            speechRecognitionConfig,
            autoDetectConfig,
            SpeechSDK.AudioConfig.fromDefaultMicrophoneInput()
        );
        console.log("üé§ STT —Ä–µ–∂–∏–º: Kazakh (primary) + Russian (fallback)");
    }

    sttBuffer = '';

    speechRecognizer.recognizing = (s, e) => {
        if (e.result && e.result.text) {
            // –ü—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–µ –≥–∏–ø–æ—Ç–µ–∑—ã
        }
    };

    speechRecognizer.recognized = (s, e) => {
        if (e.result && e.result.reason === SpeechSDK.ResultReason.RecognizedSpeech) {
            const chunk = e.result.text.trim();
            if (chunk) {
                sttBuffer += (sttBuffer ? ' ' : '') + chunk;
            }
        }
    };

    speechRecognizer.canceled = (s, e) => {
        console.log("Recognition canceled:", e);
    };

    speechRecognizer.sessionStopped = (s, e) => {
        console.log("Recognition session stopped");
    };

    muteWhileRecording = true;
    if (isSpeaking) stopSpeaking();
    const ap = document.getElementById('audioPlayer');
    if (ap) ap.muted = true;

    speechRecognizer.startContinuousRecognitionAsync(
        () => {
            document.getElementById(buttonId).innerHTML = currentButton.activeLabel;
            document.getElementById(buttonId).disabled = false;
            
            for (let key in buttonMap) {
                if (key !== language) {
                    document.getElementById(buttonMap[key].id).disabled = true;
                }
            }
        },
        (err) => {
            console.log("Failed to start continuous recognition:", err);
            for (let key in buttonMap) {
                document.getElementById(buttonMap[key].id).disabled = false;
            }
        }
    );
}

// –û—Å—Ç–∞–ª—å–Ω—ã–µ –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
function checkHung() {
    let videoElement = document.getElementById('videoPlayer');
    if (videoElement !== null && videoElement !== undefined && sessionActive) {
        let videoTime = videoElement.currentTime;
        setTimeout(() => {
            if (videoElement.currentTime === videoTime) {
                if (sessionActive) {
                    sessionActive = false;
                    if (document.getElementById('autoReconnectAvatar').checked) {
                        if (new Date() - lastInteractionTime < 300000) {
                            console.log(`[${(new Date()).toISOString()}] The video stream got disconnected, need reconnect.`);
                            isReconnecting = true;
                            peerConnectionDataChannel.onmessage = null;
                            if (avatarSynthesizer !== undefined) {
                                avatarSynthesizer.close();
                            }
                            connectAvatar();
                        }
                    }
                }
            }
        }, 1000);
    }
}

function checkLastSpeak() {
    if (lastSpeakTime === undefined) {
        return;
    }
    let currentTime = new Date();
    if (currentTime - lastSpeakTime > 15000) {
        if (document.getElementById('useLocalVideoForIdle').checked && sessionActive && !isSpeaking) {
            disconnectAvatar();
            document.getElementById('localVideo').hidden = false;
            document.getElementById('remoteVideo').style.width = '0.1px';
            sessionActive = false;
        }
    }
}

window.onload = () => {
    setInterval(() => {
        checkHung();
        checkLastSpeak();
    }, 1000);
};

window.startSession = () => {
    lastInteractionTime = new Date();
    if (document.getElementById('useLocalVideoForIdle').checked) {
        document.getElementById('startSession').disabled = true;
        document.getElementById('configuration').hidden = true;
        document.getElementById('microphoneRussian').disabled = false;
        document.getElementById('microphoneKazakh').disabled = false;
        document.getElementById('microphoneEnglish').disabled = false;
        document.getElementById('stopSession').disabled = false;
        document.getElementById('localVideo').hidden = false;
        document.getElementById('remoteVideo').style.width = '0.1px';
        document.getElementById('showTypeMessage').disabled = false;
        return;
    }
    userClosedSession = false;
    connectAvatar();
};

window.stopSession = () => {
    lastInteractionTime = new Date();
    document.getElementById('startSession').disabled = false;
    document.getElementById('microphoneRussian').disabled = true;
    document.getElementById('microphoneKazakh').disabled = true;
    document.getElementById('microphoneEnglish').disabled = true;
    document.getElementById('stopSession').disabled = true;
    document.getElementById('configuration').hidden = false;
    document.getElementById('showTypeMessage').checked = false;
    document.getElementById('showTypeMessage').disabled = true;
    document.getElementById('userMessageBox').hidden = true;
    document.getElementById('uploadImgIcon').hidden = true;
    if (document.getElementById('useLocalVideoForIdle').checked) {
        document.getElementById('localVideo').hidden = true;
    }
    userClosedSession = true;
    threadId = null;
    runId = null;
    disconnectAvatar();
    const list = document.getElementById('chatHistoryList');
    if (list) list.innerHTML = '';
};

window.clearChatHistory = () => {
    lastInteractionTime = new Date();
    threadId = null;
    runId = null;
    initMessages();
    const list = document.getElementById('chatHistoryList');
    if (list) list.innerHTML = '';
};

window.updateTypeMessageBox = () => {
    if (document.getElementById('showTypeMessage').checked) {
        document.getElementById('userMessageBox').hidden = false;
        document.getElementById('uploadImgIcon').hidden = false;
        document.getElementById('userMessageBox').addEventListener('keyup', (e) => {
            if (e.key === 'Enter') {
                const userQuery = document.getElementById('userMessageBox').innerText;
                const messageBox = document.getElementById('userMessageBox');
                const childImg = messageBox.querySelector("#picInput");
                if (childImg) {
                    childImg.style.width = "200px";
                    childImg.style.height = "200px";
                }
                let userQueryHTML = messageBox.innerHTML.trim("");
                if (userQueryHTML.startsWith('<img')) {
                    userQueryHTML = "<br/>" + userQueryHTML;
                }
                if (userQuery !== '') {
                    appendUserMessage(userQuery.trim(''));
                    // üéØ –ü—Ä–∏ –≤–≤–æ–¥–µ —Ç–µ–∫—Å—Ç–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ä—É—Å—Å–∫–∏–π –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                    handleUserQuery(userQuery.trim(''), userQueryHTML, imgUrl, selectedLanguage);
                    document.getElementById('userMessageBox').innerHTML = '';
                    imgUrl = "";
                }
            }
        });
        document.getElementById('uploadImgIcon').addEventListener('click', function () {
            imgUrl = "https://wallpaperaccess.com/full/528436.jpg";
            const userMessage = document.getElementById("userMessageBox");
            const childImg = userMessage.querySelector("#picInput");
            if (childImg) {
                userMessage.removeChild(childImg);
            }
            userMessage.innerHTML += '<br/><img id="picInput" src="https://wallpaperaccess.com/full/528436.jpg" style="width:100px;height:100px"/><br/><br/>';
        });
    } else {
        document.getElementById('userMessageBox').hidden = true;
        document.getElementById('uploadImgIcon').hidden = true;
        imgUrl = "";
    }
};

window.updateLocalVideoForIdle = () => {
    if (document.getElementById('useLocalVideoForIdle').checked) {
        document.getElementById('showTypeMessageCheckbox').hidden = true;
    } else {
        document.getElementById('showTypeMessageCheckbox').hidden = false;
    }
};

window.updatePrivateEndpoint = () => {
    if (document.getElementById('enablePrivateEndpoint').checked) {
        document.getElementById('showPrivateEndpointCheckBox').hidden = false;
    } else {
        document.getElementById('showPrivateEndpointCheckBox').hidden = true;
    }
};

window.updateCustomAvatarBox = () => {
    if (document.getElementById('customizedAvatar').checked) {
        document.getElementById('useBuiltInVoice').disabled = false;
    } else {
        document.getElementById('useBuiltInVoice').disabled = true;
        document.getElementById('useBuiltInVoice').checked = false;
    }
};
